{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/guywaffo/neural-bood-pressure-estimation?scriptVersionId=104116348\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown","outputs":[],"execution_count":0},{"cell_type":"markdown","id":"78eef7f2","metadata":{"papermill":{"duration":0.006174,"end_time":"2022-08-24T17:13:53.76695","exception":false,"start_time":"2022-08-24T17:13:53.760776","status":"completed"},"pycharm":{"name":"#%% md\n"},"tags":[]},"source":["## Network"]},{"cell_type":"code","execution_count":1,"id":"939a9f17","metadata":{"execution":{"iopub.execute_input":"2022-08-24T17:13:53.777775Z","iopub.status.busy":"2022-08-24T17:13:53.777275Z","iopub.status.idle":"2022-08-24T17:13:53.793649Z","shell.execute_reply":"2022-08-24T17:13:53.792769Z"},"papermill":{"duration":0.025916,"end_time":"2022-08-24T17:13:53.797556","exception":false,"start_time":"2022-08-24T17:13:53.77164","status":"completed"},"tags":[]},"outputs":[],"source":["import os\n"]},{"cell_type":"code","execution_count":2,"id":"ddfec8c5","metadata":{"collapsed":false,"execution":{"iopub.execute_input":"2022-08-24T17:13:53.809386Z","iopub.status.busy":"2022-08-24T17:13:53.809121Z","iopub.status.idle":"2022-08-24T17:13:59.350573Z","shell.execute_reply":"2022-08-24T17:13:59.349605Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":5.549141,"end_time":"2022-08-24T17:13:59.353036","exception":false,"start_time":"2022-08-24T17:13:53.803895","status":"completed"},"pycharm":{"name":"#%%\n"},"tags":[]},"outputs":[],"source":["# Inspiration from AlexNet CNNF\n","'''The network consists of 5 Convolutional (CONV) layers and 3 Fully Connected (FC) layers.\n","The activation used is the Rectified Linear Unit (ReLU).\n","params:\n","data_in-shape : Tensor containing the ppg time series. Size (batch_size, ppg_length, 1) batch_size=128\n","fs : sampling frequency (default fs = 125 Hz)\n","'''\n","#Import libraries\n","import tensorflow as tf\n","from keras.layers import Reshape\n","from tensorflow.keras.layers import Softmax,Bidirectional,LSTM, Permute, Input, Add, Conv1D, MaxPooling1D, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling1D, MaxPooling2D, GlobalMaxPooling2D, LeakyReLU, GlobalAveragePooling2D, ReLU, Dropout\n","from tensorflow.keras.initializers import glorot_uniform\n","from tensorflow.keras.models import Model\n","\n","\n","def AlexNet_1D(data_in_shape, num_output=2, dil=1, kernel_size=3, fs = 125, useMaxPooling=True, UseDerivative=False):\n","\n","    # Define the input as a tensor with shape input_shape\n","    X_input = Input(shape=data_in_shape)\n","\n","    if UseDerivative:\n","        dt1 = (X_input[:,1:] - X_input[:,:-1])*fs\n","        dt2 = (dt1[:,1:] - dt1[:,:-1])*fs\n","\n","        dt1 = tf.pad(dt1, tf.constant([[0,0],[0,1],[0,0]]))\n","        dt2 = tf.pad(dt2, tf.constant([[0,0],[0,2],[0,0]]))\n","        X = tf.concat([X_input, dt1, dt2], axis=2)\n","    else:        # X=tf.keras.layers.Concatenate(axis=2)([X_input, dt1,dt2])\n","        X=X_input\n","\n","    # convolutional stage\n","    X = Conv1D(filters=2, kernel_size=350, strides=1, name='conv1', kernel_initializer=glorot_uniform(seed=0), padding=\"same\")(X)\n","    X = Activation(ReLU())(X)\n","    X = BatchNormalization(axis=-1, name='BatchNorm1')(X)\n","    X = MaxPooling1D(175, strides=1, name=\"MaxPool1\",padding=\"same\")(X)\n","    \n","\n","    X = Conv1D(filters=10, kernel_size=175, strides=1, name='conv2', kernel_initializer=glorot_uniform(seed=0), padding=\"same\")(X)\n","    X = Activation(ReLU())(X)\n","    X = BatchNormalization(axis=-1, name='BatchNorm2')(X)\n","    X = MaxPooling1D(25, strides=1, name=\"MaxPool2\",padding=\"same\")(X)\n","\n","    X = Conv1D(filters=20, kernel_size=25, strides=1, name='conv3', kernel_initializer=glorot_uniform(seed=0), padding=\"same\")(X)\n","    X = Activation(ReLU())(X)\n","    X = BatchNormalization(axis=-1, name='BatchNorm3')(X)\n","    X = MaxPooling1D(10, strides=1, name=\"Maxpool3\",padding=\"same\")(X)\n","\n","    X = Conv1D(filters=40, kernel_size=10, strides=1, name='conv4', kernel_initializer=glorot_uniform(seed=0), padding=\"same\")(X)\n","    X = Activation(ReLU())(X)\n","    X = BatchNormalization(axis=-1, name='BatchNorm4')(X)\n","    X = MaxPooling1D(5, strides=1, name=\"Maxpool4\",padding=\"same\")(X)\n","\n","\n","    #Flattening the output of the NN\n","    X= Flatten()(X)\n","    X= Reshape((700,40))(X)\n","    #Bi-LSTM stage\n","    X = Bidirectional(LSTM(128, return_sequences=True),merge_mode='concat')(X)\n","    X = Bidirectional(LSTM(350, return_sequences=True),merge_mode='concat')(X)\n","\n","    # Fully connected slayer\n","    X = Flatten()(X)\n","    X = Dense( 2, activation='relu', name='dense', kernel_initializer=glorot_uniform(seed=0))(X)\n","\n","\n","\n","    # output stage\n","    X_SBP = Dense(1, activation='relu', name='SBP', kernel_initializer=glorot_uniform(seed=0))(X)\n","    X_DBP = Dense(1, activation='relu', name='DBP', kernel_initializer=glorot_uniform(seed=0))(X)\n","    model = Model(inputs=X_input, outputs=[X_SBP, X_DBP], name='AlexNet_1D')\n","    return model"]},{"cell_type":"code","execution_count":null,"id":"860cc8fd","metadata":{"papermill":{"duration":0.003232,"end_time":"2022-08-24T17:13:59.359527","exception":false,"start_time":"2022-08-24T17:13:59.356295","status":"completed"},"tags":[]},"outputs":[],"source":[]},{"cell_type":"markdown","id":"4eb0f68f","metadata":{"papermill":{"duration":0.002712,"end_time":"2022-08-24T17:13:59.3654","exception":false,"start_time":"2022-08-24T17:13:59.362688","status":"completed"},"pycharm":{"name":"#%% md\n"},"tags":[]},"source":["## Training\n"]},{"cell_type":"code","execution_count":3,"id":"ba40a70b","metadata":{"execution":{"iopub.execute_input":"2022-08-24T17:13:59.372669Z","iopub.status.busy":"2022-08-24T17:13:59.372136Z","iopub.status.idle":"2022-08-24T17:13:59.377234Z","shell.execute_reply":"2022-08-24T17:13:59.376257Z"},"papermill":{"duration":0.010857,"end_time":"2022-08-24T17:13:59.379155","exception":false,"start_time":"2022-08-24T17:13:59.368298","status":"completed"},"tags":[]},"outputs":[],"source":["\n","CHECKPOINTS_FILE=\"/kaggle/input/outputstrainingphase2/logs/checkpoints/2022-22-08_alexnet_training_kaggle_cb.h5\""]},{"cell_type":"code","execution_count":4,"id":"f9324afd","metadata":{"collapsed":false,"execution":{"iopub.execute_input":"2022-08-24T17:13:59.387571Z","iopub.status.busy":"2022-08-24T17:13:59.386207Z","iopub.status.idle":"2022-08-24T17:13:59.625983Z","shell.execute_reply":"2022-08-24T17:13:59.623485Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":0.246117,"end_time":"2022-08-24T17:13:59.628152","exception":false,"start_time":"2022-08-24T17:13:59.382035","status":"completed"},"pycharm":{"name":"#%%\n"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["2022-08-24 17:13:59.479333: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","2022-08-24 17:13:59.610216: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","2022-08-24 17:13:59.610999: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n"]}],"source":["\"\"\" train neural architectures using PPG data\n","\n","This script trains a neural network using PPG data. The data is loaded from the the .tfrecord files created by the script\n","'hdf_to_tfrecord.py'.\n","\"\"\"\n","import csv\n","import os.path\n","import warnings\n","from os.path import expanduser, join\n","from os import environ\n","from sys import argv\n","from functools import partial\n","from datetime import datetime\n","import argparse\n","\n","import tensorflow as tf\n","# tf.compat.v1.disable_eager_execution()\n","\n","\n","import pandas as pd\n","import numpy as np\n","import glob\n","\n","from tqdm import tqdm\n","\n","\n","gpu_devices = tf.config.experimental.list_physical_devices(\"GPU\")\n","for device in gpu_devices:\n","    tf.config.experimental.set_memory_growth(device, True)\n","\n","BATCH_SIZE=128\n","WIN_LEN=700\n","def read_tfrecord(example, win_len=WIN_LEN):\n","    tfrecord_format = (\n","        {\n","            'ppg': tf.io.FixedLenFeature([win_len], tf.float32),\n","            'label': tf.io.FixedLenFeature([2], tf.float32)\n","        }\n","    )\n","    parsed_features = tf.io.parse_single_example(example, tfrecord_format)\n","\n","    return parsed_features['ppg'], (parsed_features['label'][0], parsed_features['label'][1])\n","\n","\n","def create_dataset(tfrecords_dir, tfrecord_basename, win_len=WIN_LEN, batch_size=BATCH_SIZE, modus='train'):\n","    # pattern = join(tfrecords_dir, modus, tfrecord_basename + \"_\" + modus + \"_?????_of_?????.tfrecord\")\n","    pattern = glob.glob(tfrecords_dir + f\"/{modus}/*.tfrecord\")\n","    dataset = tf.data.TFRecordDataset.from_tensor_slices(pattern)\n","\n","    if modus == 'train':\n","        dataset = dataset.shuffle(1000, reshuffle_each_iteration=True)\n","        dataset = dataset.interleave(\n","            tf.data.TFRecordDataset,\n","            cycle_length=800,\n","            block_length=400)\n","    else:\n","        dataset = dataset.interleave(\n","            tf.data.TFRecordDataset)\n","\n","    dataset = dataset.map(partial(read_tfrecord, win_len=win_len), num_parallel_calls=2)\n","    dataset = dataset.shuffle(4096, reshuffle_each_iteration=True)\n","    dataset = dataset.prefetch(buffer_size=tf.data.AUTOTUNE)\n","    dataset = dataset.batch(batch_size, drop_remainder=False)\n","    dataset = dataset.repeat()\n","    \n","    return dataset\n","\n","\n","def get_model(architecture, input_shape, UseDerivative=False):\n","    return {\n","        'alexnet': AlexNet_1D(input_shape, UseDerivative=UseDerivative),\n","    }[architecture]\n","\n","DATASET_SIZE=51000\n","def ppg_train_mimic_iii(architecture,\n","                        DataDir,\n","                        ResultsDir,\n","                        CheckpointDir,\n","                        tensorboard_tag,\n","                        tfrecord_basename,\n","                        experiment_name,\n","                        win_len=WIN_LEN,\n","                        batch_size=BATCH_SIZE,\n","                        lr=None,\n","                        N_epochs=20,\n","                        Ntrain=round(DATASET_SIZE*0.7),\n","                        Nval=round(DATASET_SIZE*0.1),\n","                        Ntest=round(DATASET_SIZE*0.1),\n","                        UseDerivative=False,\n","                        earlystopping=False):\n","    # create datasets for training, validation and testing using .tfrecord files\n","    test_dataset = create_dataset(DataDir, tfrecord_basename, win_len=win_len, batch_size=batch_size,\n","                                  modus='test')\n","    train_dataset = create_dataset(DataDir, tfrecord_basename, win_len=win_len, batch_size=batch_size, modus='train')\n","    val_dataset = create_dataset(DataDir, tfrecord_basename, win_len=win_len, batch_size=batch_size,\n","                                 modus='val')\n","    data_in_shape = (win_len, 1)\n","\n","    # load the neurarchitecture\n","    model = get_model(architecture, data_in_shape, UseDerivative=UseDerivative)\n","\n","    # callback for logging training and validation results\n","    csvLogger_cb = tf.keras.callbacks.CSVLogger(\n","        filename=join(ResultsDir, experiment_name + '_learningcurve.csv')\n","    )\n","\n","    # checkpoint callback\n","    cb_file=join(CheckpointDir, experiment_name + '_cb.h5')\n","    checkpoint_cb = tf.keras.callbacks.ModelCheckpoint(\n","        filepath=cb_file,\n","        save_best_only=True\n","    )\n","    \n","    if os.path.exists(CHECKPOINTS_FILE):\n","        model.load_weights(CHECKPOINTS_FILE)\n","        print(\"Loaded weights from checkpoint\",CHECKPOINTS_FILE)\n","\n","    # tensorboard callback\n","    tensorbard_cb = tf.keras.callbacks.TensorBoard(\n","        log_dir=join(ResultsDir, 'tb', tensorboard_tag),\n","        histogram_freq=0,\n","        update_freq=\"batch\",\n","        write_images=True,\n","        write_graph=True    )\n","\n","    # callback for early stopping if validation loss stops improving\n","    EarlyStopping_cb = tf.keras.callbacks.EarlyStopping(\n","        monitor='val_loss',\n","        patience=10,\n","        restore_best_weights=True\n","    )\n","\n","\n","    # define Adam optimizer\n","    if lr is None:\n","        opt = tf.keras.optimizers.Adam()\n","    else:\n","        opt = tf.keras.optimizers.Adam(learning_rate=lr)\n","\n","    # compile model using mean squared error as loss function\n","    model.compile(\n","        optimizer=opt,\n","        loss=tf.keras.losses.mean_squared_error,\n","        metrics=[['mae','mse'], ['mae','mse']]\n","    )\n","    \n","    class LRA(tf.keras.callbacks.Callback):\n","        def __init__(self, model, initial_learning_rate,frequency=175,gamma=0.1):\n","            super(LRA, self).__init__()\n","            self.current_learning_rate=initial_learning_rate\n","            self.model=model\n","            self.frequency=frequency\n","            self.current_iter=0\n","            self.gamma=gamma\n","\n","        def on_train_begin(self, logs=None):\n","            tf.keras.backend.set_value(self.model.optimizer.lr,\n","                                       self.current_learning_rate)\n","\n","        def on_train_batch_end(self, batch, logs=None):\n","            self.current_iter+=1\n","            if self.current_iter%self.frequency==0:\n","                self.current_learning_rate=self.current_learning_rate-self.current_learning_rate*self.gamma\n","                tf.keras.backend.set_value(self.model.optimizer.lr, self.current_learning_rate)\n","                self.current_iter=0\n","                # print(\"Updating the learning rate to: \",self.current_learning_rate)\n","\n","    \n","    \n","    cb_list = [checkpoint_cb,\n","               tensorbard_cb,\n","               csvLogger_cb,\n","               tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss',factor=0.1,patience=1)\n","               ]\n","\n","\n","\n","\n","\n","    # # Perform Training and Validation\n","    history = model.fit(\n","        train_dataset,\n","        steps_per_epoch=Ntrain // batch_size,\n","        epochs=N_EPOCHS,\n","        validation_data=val_dataset,\n","        validation_steps=Nval // batch_size,\n","        callbacks=cb_list\n","    )\n","    # Predictions on the testset\n","    print(\"Loading weights from \", checkpoint_cb.filepath)\n","    model.load_weights(checkpoint_cb.filepath)\n","    test_results = pd.DataFrame({'SBP_true': [],\n","                                 'DBP_true': [],\n","                                 'SBP_est': [],\n","                                 'DBP_est': []})\n","\n","    # store predictions on the test set as well as the corresponding ground truth in a csv file\n","    test_dataset = iter(test_dataset)\n","    for i in tqdm(range(int(Ntest // batch_size)), \"Running test\"):\n","        ppg_test, BP_true = test_dataset.next()\n","        BP_est = model.predict(ppg_test, verbose=0)\n","        with warnings.catch_warnings():\n","            TestBatchResult = pd.DataFrame({'SBP_true': BP_true[0].numpy(),\n","                                            'DBP_true': BP_true[1].numpy(),\n","                                            'SBP_est': np.squeeze(BP_est[0]),\n","                                            'DBP_est': np.squeeze(BP_est[1]),\n","                                            })\n","            test_results = test_results.append(TestBatchResult)\n","\n","    ResultsFile = join(ResultsDir, experiment_name + '_test_results.csv')\n","    test_results.to_csv(ResultsFile)\n","\n","    ResultsFileMae = join(ResultsDir, experiment_name + '_test_results_ae.csv')\n","\n","    sbp_mae = np.mean(np.abs(test_results[\"SBP_true\"] - test_results[\"SBP_est\"]))\n","    sbp_aestd = np.std(np.abs(test_results[\"SBP_true\"] - test_results[\"SBP_est\"]))\n","\n","    dbp_mae = np.mean(np.abs(test_results[\"DBP_true\"] - test_results[\"DBP_est\"]))\n","    dbp_aestd = np.std(np.abs(test_results[\"DBP_true\"] - test_results[\"DBP_est\"]))\n","\n","    with open(ResultsFileMae, \"w\") as output:\n","        writer = csv.writer(output)\n","        writer.writerow([\"sbp_mae\", \"sbp_aestd\", \"dbp_mae\", \"dbp_aestd\"])\n","        writer.writerow([sbp_mae, sbp_aestd, dbp_mae, dbp_aestd])\n","    test_results.to_csv(ResultsFile)\n","\n","    idx_min = np.argmin(history.history['val_loss'])\n","\n","    print(' Training finished')\n","\n","    return history.history['SBP_mae'][idx_min], history.history['DBP_mae'][idx_min], history.history['val_SBP_mae'][\n","        idx_min], history.history['val_DBP_mae'][idx_min]\n"]},{"cell_type":"markdown","id":"0faf6389","metadata":{"papermill":{"duration":0.002888,"end_time":"2022-08-24T17:13:59.634198","exception":false,"start_time":"2022-08-24T17:13:59.63131","status":"completed"},"pycharm":{"name":"#%% md\n"},"tags":[]},"source":["# Launch training"]},{"cell_type":"code","execution_count":5,"id":"6f09c985","metadata":{"collapsed":false,"execution":{"iopub.execute_input":"2022-08-24T17:13:59.641316Z","iopub.status.busy":"2022-08-24T17:13:59.641023Z","iopub.status.idle":"2022-08-24T18:49:59.216088Z","shell.execute_reply":"2022-08-24T18:49:59.215056Z"},"jupyter":{"outputs_hidden":false},"papermill":{"duration":5759.581009,"end_time":"2022-08-24T18:49:59.218139","exception":false,"start_time":"2022-08-24T17:13:59.63713","status":"completed"},"pycharm":{"name":"#%%\n"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["2022-08-24 17:13:59.652249: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n","To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n","2022-08-24 17:13:59.652577: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","2022-08-24 17:13:59.653310: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","2022-08-24 17:13:59.653984: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","2022-08-24 17:14:02.012123: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","2022-08-24 17:14:02.013023: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","2022-08-24 17:14:02.013701: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","2022-08-24 17:14:02.014287: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15403 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n","2022-08-24 17:14:03.850281: I tensorflow/core/profiler/lib/profiler_session.cc:131] Profiler session initializing.\n","2022-08-24 17:14:03.850326: I tensorflow/core/profiler/lib/profiler_session.cc:146] Profiler session started.\n","2022-08-24 17:14:03.853420: I tensorflow/core/profiler/internal/gpu/cupti_tracer.cc:1614] Profiler found 1 GPUs\n","2022-08-24 17:14:04.081127: I tensorflow/core/profiler/lib/profiler_session.cc:164] Profiler session tear down.\n","2022-08-24 17:14:04.081300: I tensorflow/core/profiler/internal/gpu/cupti_tracer.cc:1748] CUPTI activity buffer flushed\n"]},{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n"]},{"name":"stderr","output_type":"stream","text":["2022-08-24 17:14:09.408850: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\n","2022-08-24 17:14:15.942553: I tensorflow/stream_executor/cuda/cuda_dnn.cc:369] Loaded cuDNN version 8005\n"]},{"name":"stdout","output_type":"stream","text":["   1/1115 [..............................] - ETA: 5:42:27 - loss: 18039.8535 - SBP_loss: 13966.5977 - DBP_loss: 4073.2559 - SBP_mae: 116.9355 - SBP_mse: 13966.5977 - DBP_mae: 62.9492 - DBP_mse: 4073.2559"]},{"name":"stderr","output_type":"stream","text":["2022-08-24 17:14:22.944420: I tensorflow/core/profiler/lib/profiler_session.cc:131] Profiler session initializing.\n","2022-08-24 17:14:22.944474: I tensorflow/core/profiler/lib/profiler_session.cc:146] Profiler session started.\n"]},{"name":"stdout","output_type":"stream","text":["   2/1115 [..............................] - ETA: 17:12 - loss: 18588.0898 - SBP_loss: 14702.3672 - DBP_loss: 3885.7212 - SBP_mae: 119.5308 - SBP_mse: 14702.3672 - DBP_mae: 61.3941 - DBP_mse: 3885.7212  "]},{"name":"stderr","output_type":"stream","text":["2022-08-24 17:14:23.642285: I tensorflow/core/profiler/lib/profiler_session.cc:66] Profiler session collecting data.\n","2022-08-24 17:14:23.652371: I tensorflow/core/profiler/internal/gpu/cupti_tracer.cc:1748] CUPTI activity buffer flushed\n","2022-08-24 17:14:23.794841: I tensorflow/core/profiler/internal/gpu/cupti_collector.cc:673]  GpuTracer has collected 13422 callback api events and 13414 activity events. \n","2022-08-24 17:14:23.960312: I tensorflow/core/profiler/lib/profiler_session.cc:164] Profiler session tear down.\n","2022-08-24 17:14:24.248829: I tensorflow/core/profiler/rpc/client/save_profile.cc:136] Creating directory: /kaggle/working/logs/results/tb/baseline_cnn_kaggle/train/plugins/profile/2022_08_24_17_14_23\n","\n","2022-08-24 17:14:24.434628: I tensorflow/core/profiler/rpc/client/save_profile.cc:142] Dumped gzipped tool data for trace.json.gz to /kaggle/working/logs/results/tb/baseline_cnn_kaggle/train/plugins/profile/2022_08_24_17_14_23/32e23090d9fc.trace.json.gz\n","2022-08-24 17:14:24.617204: I tensorflow/core/profiler/rpc/client/save_profile.cc:136] Creating directory: /kaggle/working/logs/results/tb/baseline_cnn_kaggle/train/plugins/profile/2022_08_24_17_14_23\n","\n","2022-08-24 17:14:24.626795: I tensorflow/core/profiler/rpc/client/save_profile.cc:142] Dumped gzipped tool data for memory_profile.json.gz to /kaggle/working/logs/results/tb/baseline_cnn_kaggle/train/plugins/profile/2022_08_24_17_14_23/32e23090d9fc.memory_profile.json.gz\n","2022-08-24 17:14:24.630960: I tensorflow/core/profiler/rpc/client/capture_profile.cc:251] Creating directory: /kaggle/working/logs/results/tb/baseline_cnn_kaggle/train/plugins/profile/2022_08_24_17_14_23\n","Dumped tool data for xplane.pb to /kaggle/working/logs/results/tb/baseline_cnn_kaggle/train/plugins/profile/2022_08_24_17_14_23/32e23090d9fc.xplane.pb\n","Dumped tool data for overview_page.pb to /kaggle/working/logs/results/tb/baseline_cnn_kaggle/train/plugins/profile/2022_08_24_17_14_23/32e23090d9fc.overview_page.pb\n","Dumped tool data for input_pipeline.pb to /kaggle/working/logs/results/tb/baseline_cnn_kaggle/train/plugins/profile/2022_08_24_17_14_23/32e23090d9fc.input_pipeline.pb\n","Dumped tool data for tensorflow_stats.pb to /kaggle/working/logs/results/tb/baseline_cnn_kaggle/train/plugins/profile/2022_08_24_17_14_23/32e23090d9fc.tensorflow_stats.pb\n","Dumped tool data for kernel_stats.pb to /kaggle/working/logs/results/tb/baseline_cnn_kaggle/train/plugins/profile/2022_08_24_17_14_23/32e23090d9fc.kernel_stats.pb\n","\n"]},{"name":"stdout","output_type":"stream","text":["1115/1115 [==============================] - 303s 255ms/step - loss: 975.2943 - SBP_loss: 695.6553 - DBP_loss: 279.6395 - SBP_mae: 20.2148 - SBP_mse: 695.6553 - DBP_mae: 12.3028 - DBP_mse: 279.6395 - val_loss: 871.2118 - val_SBP_loss: 775.9693 - val_DBP_loss: 95.2421 - val_SBP_mae: 24.9503 - val_SBP_mse: 775.9693 - val_DBP_mae: 9.2271 - val_DBP_mse: 95.2421\n","Epoch 2/20\n","1115/1115 [==============================] - 292s 262ms/step - loss: 670.9113 - SBP_loss: 510.4147 - DBP_loss: 160.4962 - SBP_mae: 18.0017 - SBP_mse: 510.4147 - DBP_mae: 9.3045 - DBP_mse: 160.4962 - val_loss: 627.2715 - val_SBP_loss: 546.3076 - val_DBP_loss: 80.9630 - val_SBP_mae: 20.3252 - val_SBP_mse: 546.3076 - val_DBP_mae: 7.4097 - val_DBP_mse: 80.9630\n","Epoch 3/20\n","1115/1115 [==============================] - 282s 253ms/step - loss: 657.0527 - SBP_loss: 496.2780 - DBP_loss: 160.7747 - SBP_mae: 17.7275 - SBP_mse: 496.2780 - DBP_mae: 9.1959 - DBP_mse: 160.7747 - val_loss: 316.5066 - val_SBP_loss: 235.4232 - val_DBP_loss: 81.0830 - val_SBP_mae: 14.4606 - val_SBP_mse: 235.4232 - val_DBP_mae: 7.6272 - val_DBP_mse: 81.0830\n","Epoch 4/20\n","1115/1115 [==============================] - 282s 253ms/step - loss: 648.5606 - SBP_loss: 488.6128 - DBP_loss: 159.9478 - SBP_mae: 17.5745 - SBP_mse: 488.6128 - DBP_mae: 9.2108 - DBP_mse: 159.9478 - val_loss: 867.4587 - val_SBP_loss: 741.9236 - val_DBP_loss: 125.5332 - val_SBP_mae: 24.6513 - val_SBP_mse: 741.9236 - val_DBP_mae: 8.6521 - val_DBP_mse: 125.5332\n","Epoch 5/20\n","1115/1115 [==============================] - 282s 253ms/step - loss: 614.0583 - SBP_loss: 461.9209 - DBP_loss: 152.1379 - SBP_mae: 17.0359 - SBP_mse: 461.9209 - DBP_mae: 8.9488 - DBP_mse: 152.1379 - val_loss: 397.6570 - val_SBP_loss: 328.6247 - val_DBP_loss: 69.0332 - val_SBP_mae: 15.2893 - val_SBP_mse: 328.6247 - val_DBP_mae: 6.5734 - val_DBP_mse: 69.0332\n","Epoch 6/20\n","1115/1115 [==============================] - 282s 253ms/step - loss: 606.1242 - SBP_loss: 452.9282 - DBP_loss: 153.1963 - SBP_mae: 16.8550 - SBP_mse: 452.9282 - DBP_mae: 8.9614 - DBP_mse: 153.1963 - val_loss: 407.9685 - val_SBP_loss: 339.7971 - val_DBP_loss: 68.1703 - val_SBP_mae: 15.6663 - val_SBP_mse: 339.7971 - val_DBP_mae: 6.4906 - val_DBP_mse: 68.1703\n","Epoch 7/20\n","1115/1115 [==============================] - 292s 262ms/step - loss: 601.7539 - SBP_loss: 451.0331 - DBP_loss: 150.7209 - SBP_mae: 16.8129 - SBP_mse: 451.0331 - DBP_mae: 8.8903 - DBP_mse: 150.7209 - val_loss: 427.2353 - val_SBP_loss: 359.0976 - val_DBP_loss: 68.1386 - val_SBP_mae: 15.9875 - val_SBP_mse: 359.0976 - val_DBP_mae: 6.4683 - val_DBP_mse: 68.1386\n","Epoch 8/20\n","1115/1115 [==============================] - 283s 254ms/step - loss: 605.5848 - SBP_loss: 453.3308 - DBP_loss: 152.2540 - SBP_mae: 16.8304 - SBP_mse: 453.3308 - DBP_mae: 8.8994 - DBP_mse: 152.2540 - val_loss: 435.5382 - val_SBP_loss: 367.8906 - val_DBP_loss: 67.6471 - val_SBP_mae: 16.1986 - val_SBP_mse: 367.8906 - val_DBP_mae: 6.3866 - val_DBP_mse: 67.6471\n","Epoch 9/20\n","1115/1115 [==============================] - 281s 252ms/step - loss: 604.2801 - SBP_loss: 454.5678 - DBP_loss: 149.7123 - SBP_mae: 16.8539 - SBP_mse: 454.5678 - DBP_mae: 8.8918 - DBP_mse: 149.7123 - val_loss: 432.8665 - val_SBP_loss: 364.8398 - val_DBP_loss: 68.0263 - val_SBP_mae: 16.0759 - val_SBP_mse: 364.8398 - val_DBP_mae: 6.4640 - val_DBP_mse: 68.0263\n","Epoch 10/20\n","1115/1115 [==============================] - 281s 252ms/step - loss: 609.0325 - SBP_loss: 454.5954 - DBP_loss: 154.4372 - SBP_mae: 16.8517 - SBP_mse: 454.5954 - DBP_mae: 8.9274 - DBP_mse: 154.4372 - val_loss: 429.0713 - val_SBP_loss: 361.0439 - val_DBP_loss: 68.0277 - val_SBP_mae: 16.0361 - val_SBP_mse: 361.0439 - val_DBP_mae: 6.4384 - val_DBP_mse: 68.0277\n","Epoch 11/20\n","1115/1115 [==============================] - 281s 252ms/step - loss: 609.3469 - SBP_loss: 456.9411 - DBP_loss: 152.4052 - SBP_mae: 16.9213 - SBP_mse: 456.9411 - DBP_mae: 8.9180 - DBP_mse: 152.4052 - val_loss: 433.1477 - val_SBP_loss: 365.4307 - val_DBP_loss: 67.7159 - val_SBP_mae: 16.1357 - val_SBP_mse: 365.4307 - val_DBP_mae: 6.4019 - val_DBP_mse: 67.7159\n","Epoch 12/20\n","1115/1115 [==============================] - 281s 252ms/step - loss: 600.7091 - SBP_loss: 448.6372 - DBP_loss: 152.0717 - SBP_mae: 16.7393 - SBP_mse: 448.6372 - DBP_mae: 8.8934 - DBP_mse: 152.0717 - val_loss: 428.3166 - val_SBP_loss: 359.7578 - val_DBP_loss: 68.5592 - val_SBP_mae: 15.9585 - val_SBP_mse: 359.7578 - val_DBP_mae: 6.5144 - val_DBP_mse: 68.5592\n","Epoch 13/20\n","1115/1115 [==============================] - 282s 253ms/step - loss: 605.8676 - SBP_loss: 455.3407 - DBP_loss: 150.5267 - SBP_mae: 16.8803 - SBP_mse: 455.3407 - DBP_mae: 8.8993 - DBP_mse: 150.5267 - val_loss: 425.9803 - val_SBP_loss: 357.4533 - val_DBP_loss: 68.5265 - val_SBP_mae: 15.9369 - val_SBP_mse: 357.4533 - val_DBP_mae: 6.4960 - val_DBP_mse: 68.5265\n","Epoch 14/20\n","1115/1115 [==============================] - 281s 252ms/step - loss: 600.9658 - SBP_loss: 449.9446 - DBP_loss: 151.0214 - SBP_mae: 16.7727 - SBP_mse: 449.9446 - DBP_mae: 8.8949 - DBP_mse: 151.0214 - val_loss: 429.6903 - val_SBP_loss: 361.4383 - val_DBP_loss: 68.2511 - val_SBP_mae: 16.0119 - val_SBP_mse: 361.4383 - val_DBP_mae: 6.4698 - val_DBP_mse: 68.2511\n","Epoch 15/20\n","1115/1115 [==============================] - 283s 254ms/step - loss: 603.1937 - SBP_loss: 451.9320 - DBP_loss: 151.2615 - SBP_mae: 16.8106 - SBP_mse: 451.9320 - DBP_mae: 8.8878 - DBP_mse: 151.2615 - val_loss: 431.1483 - val_SBP_loss: 363.0742 - val_DBP_loss: 68.0739 - val_SBP_mae: 16.0641 - val_SBP_mse: 363.0742 - val_DBP_mae: 6.4570 - val_DBP_mse: 68.0739\n","Epoch 16/20\n","1115/1115 [==============================] - 282s 253ms/step - loss: 609.4440 - SBP_loss: 456.6781 - DBP_loss: 152.7659 - SBP_mae: 16.8892 - SBP_mse: 456.6781 - DBP_mae: 8.9211 - DBP_mse: 152.7659 - val_loss: 432.7117 - val_SBP_loss: 364.4718 - val_DBP_loss: 68.2403 - val_SBP_mae: 16.0908 - val_SBP_mse: 364.4718 - val_DBP_mae: 6.4620 - val_DBP_mse: 68.2403\n","Epoch 17/20\n","1115/1115 [==============================] - 282s 253ms/step - loss: 600.9056 - SBP_loss: 450.3762 - DBP_loss: 150.5290 - SBP_mae: 16.7785 - SBP_mse: 450.3762 - DBP_mae: 8.8803 - DBP_mse: 150.5290 - val_loss: 436.3984 - val_SBP_loss: 368.8368 - val_DBP_loss: 67.5612 - val_SBP_mae: 16.2112 - val_SBP_mse: 368.8368 - val_DBP_mae: 6.3762 - val_DBP_mse: 67.5612\n","Epoch 18/20\n","1115/1115 [==============================] - 281s 252ms/step - loss: 607.6815 - SBP_loss: 454.9948 - DBP_loss: 152.6869 - SBP_mae: 16.8666 - SBP_mse: 454.9948 - DBP_mae: 8.9156 - DBP_mse: 152.6869 - val_loss: 433.5071 - val_SBP_loss: 365.4604 - val_DBP_loss: 68.0469 - val_SBP_mae: 16.1291 - val_SBP_mse: 365.4604 - val_DBP_mae: 6.4225 - val_DBP_mse: 68.0469\n","Epoch 19/20\n","1115/1115 [==============================] - 281s 252ms/step - loss: 608.0345 - SBP_loss: 455.2444 - DBP_loss: 152.7893 - SBP_mae: 16.8905 - SBP_mse: 455.2444 - DBP_mae: 8.9246 - DBP_mse: 152.7893 - val_loss: 439.3559 - val_SBP_loss: 371.6526 - val_DBP_loss: 67.7031 - val_SBP_mae: 16.2365 - val_SBP_mse: 371.6526 - val_DBP_mae: 6.4033 - val_DBP_mse: 67.7031\n","Epoch 20/20\n","1115/1115 [==============================] - 281s 252ms/step - loss: 604.8792 - SBP_loss: 452.3268 - DBP_loss: 152.5532 - SBP_mae: 16.8349 - SBP_mse: 452.3268 - DBP_mae: 8.9222 - DBP_mse: 152.5532 - val_loss: 435.1209 - val_SBP_loss: 367.2187 - val_DBP_loss: 67.9026 - val_SBP_mae: 16.1887 - val_SBP_mse: 367.2187 - val_DBP_mae: 6.4062 - val_DBP_mse: 67.9026\n","Loading weights from  /kaggle/working/logs/checkpoints/baseline_cnn_kaggle_cb.h5\n"]},{"name":"stderr","output_type":"stream","text":["Running test: 100%|██████████| 159/159 [00:26<00:00,  5.90it/s]\n"]},{"name":"stdout","output_type":"stream","text":[" Training finished\n"]},{"data":{"text/plain":["(17.727481842041016, 9.195874214172363, 14.460556983947754, 7.6272478103637695)"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["architecture = \"alexnet\"\n","experiment_name = \"training_kaggle\"\n","# experiment_name = datetime.now().strftime(\"%Y-%d-%m\") + '_' + architecture + '_' + experiment_name\n","experiment_name=\"baseline_cnn_kaggle\"\n","ROOT_DIR=\"/kaggle/working/logs\"\n","DataDir = \"/kaggle/input/mmicdatasetbaseline/train_test_from_mat\"\n","ResultsDir = os.path.join(ROOT_DIR, \"results\")\n","CheckpointDir = os.path.join(ROOT_DIR,\"checkpoints\")\n","tb_tag = experiment_name\n","lr = 0.001\n","batch_size = 32\n","WIN_LEN = 700\n","N_EPOCHS=20\n","tfrecord_basename = 'MIMIC_III_ppg'\n","\n","ppg_train_mimic_iii(architecture,\n","                    DataDir,\n","                    ResultsDir,\n","                    CheckpointDir,\n","                    tb_tag,\n","                    tfrecord_basename,\n","                    experiment_name,\n","                    win_len=WIN_LEN,\n","                    batch_size=batch_size,\n","                    lr=lr,\n","                    N_epochs=N_EPOCHS,\n","                    UseDerivative=True,\n","                    earlystopping=False)  # False originally\n"]},{"cell_type":"code","execution_count":null,"id":"44d71227","metadata":{"papermill":{"duration":1.260155,"end_time":"2022-08-24T18:50:02.072896","exception":false,"start_time":"2022-08-24T18:50:00.812741","status":"completed"},"tags":[]},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"id":"10d97a6c","metadata":{"papermill":{"duration":1.30719,"end_time":"2022-08-24T18:50:04.705641","exception":false,"start_time":"2022-08-24T18:50:03.398451","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.12"},"papermill":{"default_parameters":{},"duration":5782.814786,"end_time":"2022-08-24T18:50:08.884987","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2022-08-24T17:13:46.070201","version":"2.3.4"}},"nbformat":4,"nbformat_minor":5}